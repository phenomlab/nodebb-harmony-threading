// Copy this into ACP->admin/appearance/customise#custom-js

    $(document).ready(function() {
        $(window).on('action:ajaxify.end', function(data) {
// Find the button with data-bs-target matching the wildcard pattern
var button = $('button[data-bs-target*="#spoiler"]');

// Change the text and add Font Awesome arrows
button.html('Show Content <i class="fas fa-caret-down"></i>');

// Add a click event handler to toggle the state and update the text and arrow
button.on('click', function() {
  $(this).toggleClass('collapsed');
  if ($(this).hasClass('collapsed')) {
    $(this).html('Hide Content <i class="fas fa-caret-up"></i>');
  } else {
    $(this).html('Show Content <i class="fas fa-caret-down"></i>');
  }
});

  if (window.location.hash) {
    var hash = window.location.hash;
    $(hash).collapse('show');
  }
});
});


$(document).ready(function() {
        var word = $.trim($('[component="siteTitle"]').text());
        var characters = word.split('');
        var lastThreeCharacters = characters.slice(-3);
        var lastThreeCharactersString = lastThreeCharacters.join('');

        $('a[component="siteTitle"]').html(word.replace(lastThreeCharactersString, '<span class="split">' + lastThreeCharactersString + '</span>'));

        // HTML insertion function
       if ($('#siteSlogan').length === 0) {
            var htmlToInsert = '<div class="slogan" id="siteSlogan">Technology Hub</div>';
            $('a[component="siteTitle"]').append(htmlToInsert);
        }
  // Get the color of the element
  var brand = "var(--bs-logo-color)";
  var slogan = "var(--bs-link-color)";
  // Apply the gradient as the background of the element
  $('.split').css('color', brand);
   $('.slogan').css('color', slogan);

   // $('.split').addClass("split");//.css('color', color2);
});

function logoColor() {
  // Get the color of the element
  var brand = "var(--bs-logo-color)";
  var slogan = "var(--bs-link-color)";
  // Apply the gradient as the background of the element
  $('.split').css('color', brand);
   $('.slogan').css('color', slogan);
}

$(document).ready(function() {
    $(window).on('action:ajaxify.end', function(data) {
        var addBeforeQuickReply = $('.quickreply-message');
        // Insert content into the selected element
        addBeforeQuickReply.prepend("<div class='post-timeline-ends'><p>There aren't any more posts to display in this this topic. <strong>Why not create one yourself?<strong></p></div>");
    });
});

function addAuthorBadge() {
  $(".topic-owner-post").each(function() {
    var $authorElement = $(this).find(".text-nowrap:first");
    
    // Check if the author badge already exists
    if (!$authorElement.find(".author").length) {
      // Prepend the author element
      $authorElement.append("<span class='author' data-toggle='tooltip' data-placement='left' title='Topic Author'><span class='author-icon'><i class='fa-regular fa-message-quote'></i></span>");
      // Add tooltip on hover
      $authorElement.find(".author").tooltip({
        content: "Topic Author",
        track: true // This enables the tooltip to track the mouse movement
      });
    }
  });
}


$(document).ready(function() {
  $(window).on('action:posts.loaded', function(data) {
      addAuthorBadge();
    });
});


$(document).ready(function() {
  $(window).on('action:ajaxify.end', function(data) {
      addAuthorBadge();
    });
});

$(document).ready(function() {
    $.getJSON('/api/categories', function(data, status) {
        $.each(data.categories, function(key, value) {
            var categorylist = $(" \
	<li class='dropdown-item tree-root'><span class='category-menu'><i class='fal " + this.icon + "'></i><a style='display: inherit;' class='dropdown-item rounded-1' href='/category/" + this.slug + "'>" + this.name + "</a></span></li> \
		<ul class='tree-branch' style='list-style: none;'>" +
                this.children.map(c => `<li class='dropdown-item tree-node'><span class='category-menu-tree-node'><i class='fal ${c.icon}'></i><a class='dropdown-item rounded-1' style='display: inherit;' href='/category/${c.slug}'>${c.name}</a></span></li>`).join(" ") +
                "</ul>"
            );
            if ($(window).width() < 767) {
                $(".bottombar #thecategories").append(categorylist);
            } else {
                $(".sidebar-left #thecategories").append(categorylist);
            }
        });
    });
});


// Function - Categories
$(document).ready(function() {
    function animateTags() {
        if (ajaxify.data.template.name === 'categories') {
            var tags = $('.popular-tags .tag-item');
            var bar = $('<div class="popular-tags-bar"></div>');
            tags.append(bar);

            var max;

            setTimeout(function() {
                tags.each(function() {
                    var bar = $(this).find('.popular-tags-bar');
                    var val = parseInt(bar.parents('a').find('.tag-topic-count').text(), 10);
                    max = max > val ? max : val;

                    bar.css({
                        width: val / max * 100 + '%'
                    });
                });
            }, 100);
        }
    }
    animateTags();
    $(window).on('action:ajaxify.end', animateTags);
});

// Function - Fancybox
function fancybox() {
if (top.location.pathname !== '/login') {
        $(document).ready(function() {
            $('a').not('.forum-logo').not(".avatar").not(".emoji").not(".bmac-noanimate").each(function() {
                $('a[href*=".jpg"], a[href*=".jpeg"], a[href*=".png"], a[href*=".gif"], a[href*=".webp"], a[href*=".svg"]').addClass("noanimate");
            });
        });
                    Fancybox.bind(
                'a[href*=".jpg"], a[href*=".jpeg"], a[href*=".png"], a[href*=".gif"], a[href*=".webp"], a[href*=".svg"]', {
                    groupAll: true,
                }
            );
}
}
$(window).on('action:ajaxify.end', function(data) {
    fancybox();
});
$(window).on('action:posts.loaded', function(data) {
    fancybox();
});
$(window).on('action:chat.loaded', function(data) {
    fancybox();
});

// Function - Recent card borders
$(document).ready(function() {
    $(window).on('action:ajaxify.end', function(data) {
        $('.recent-card-container').each(function(i) {
            var dataId = $(this).attr("data-cid");
            var color = $('.icon', this).css("background-color");
            //console.log("data-cid " + dataId + " is " + color);
            $('[data-cid="' + dataId + '"] .recent-card.border').attr("style", "border-color: " + color + " !important;border-width:2px !important");
            $('[data-cid="' + dataId + '"] .recent-card h4 a').attr("style", "color: " + color);
        });
    });
});

// Function to remove all CSS files from the /assets/customcss/editors directory
function removeAllEditorCSS() {
  $('head style').each(function() {
    var cssHref = $(this).attr('rel');
    if (cssHref && cssHref.startsWith("/assets/customcss/editors/")) {
      $(this).remove();
    }
  });
}

// Function to remove all CSS files from the /assets/customcss/ directory
function removeAllCustomCSS() {
  $('head style').each(function() {
    var cssHref = $(this).attr('rel');
    if (cssHref && cssHref.startsWith("/assets/customcss/")) {
      $(this).remove();
    }
  });
}


// Swatch Applet
$(document).ready(function() {
	function generateRandomString(length) {

		var text = "";
		var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

		for (var i = 0; i < length; i++) {
			text += possible.charAt(Math.floor(Math.random() * possible.length));
		}

		return text;
	}
	var string = generateRandomString(10);
	$("#random_string").text(string);
	var whichTheme = localStorage.getItem("theme");
	var activeTheme = localStorage.getItem("activeTheme");
	var savedTheme = localStorage.getItem("savedTheme");
	var activeLogo = localStorage.getItem("activeLogo");
	var activeThemeType = localStorage.getItem("themeType");
	var activeThemePath = "/assets/customcss/editors/";
	// If no theme is detected (for example, a new visitor), then set this to default
	if (!whichTheme) {
		// dark-mode media query matched or not
		let matched = window.matchMedia('(prefers-color-scheme: dark)').matches;
		//var override = getUrlParameter('override');

		if (matched) {
			// Offer the Dark theme by default
			whichTheme = "dark";
			activeTheme = "/assets/customcss/dark.css?version=" + string;
			//$("link[rel=stylesheet]").attr('href' , thishref + "?version=" + string + "");
		} else {
			// Leave the default theme intact
			whichTheme = "light";
			activeTheme = "/assets/customcss/light.css?version=" + string;
		}
		// See if override has been enabled
		if (whichTheme === 'light') {
			// Sudonix is overriding operating system settings and will force dark scheme
			activeTheme = "/assets/customcss/light.css?version=" + string;
		} 
		else {
			// Nothing to do :)
		}
	}
	if (whichTheme) {
	/*
		$.get(activeTheme, function(css) {
			$('<style type="text/css"></style>')
				.html(css)
				.appendTo("head");
		});
		*/
		/* If savedTheme is undefined it will return null - based on this, we assume that the user has the default theme selected and never
		changed it, so we'll need to force that here
		*/
		if(!savedTheme) {
		    var savedTheme = "light";
		}
		/*
		$.get(activeThemePath + savedTheme + ".css", function(css) {
			$('<style type="text/css"></style>')
				.html(css)
				.appendTo("head");
			});
			*/
			logoColor();
		// Check to see if we're using a light theme - if so, add orange gradient to slogan
		if (activeThemeType === "dim") {
			// The string contains any of the substrings
			$('#siteSlogan').addClass("slogan-gradient-dark");
			$('#siteSlogan').removeClass("slogan-gradient");
		} 
		if (activeThemeType === "dark") {
			// The string contains any of the substrings
			$('#siteSlogan').addClass("slogan-gradient-dark");
			$('#siteSlogan').removeClass("slogan-gradient");
		}
		if (activeThemeType === "light") {
			// The string contains any of the substrings
			$('#siteSlogan').removeClass("slogan-gradient-dark");
			$('#siteSlogan').addClass("slogan-gradient");

		} 
	} else {}
	$(document).ready(function() {
		$("body").on("click change", "#theme li", function() {
	  // Before loading new CSS files, remove all CSS files from /assets/customcss/editors
	  removeAllCustomCSS();
      removeAllEditorCSS();
      logoColor();
			var string = generateRandomString(10);
			$("#random_string").text(string);
			var thishref = $(this).attr('rel') + '?version=' + string;
			var thisId = $(this).attr('id');
			$.get(thishref, function(css) {
				$('<style type="text/css"></style>')
					.html(css)
					.appendTo("head");
			});
			$.get("/assets/customcss/editors/" + thisId + ".css", function(css) {
				$('<style type="text/css"></style>')
					.html(css)
					.appendTo("head");
			});
			// Check to see if we're using a light theme - if so, add orange gradient to slogan
			var newThemeType = $(this).attr("theme-type");
			if (newThemeType === "dim") {
				// The string contains any of the substrings
				$('#siteSlogan').removeClass("slogan-gradient");
				$('#siteSlogan').addClass("slogan-gradient-dark");
			}
			if (newThemeType === "dark") {
				// The string contains any of the substrings
				$('#siteSlogan').removeClass("slogan-gradient");
				$('#siteSlogan').addClass("slogan-gradient-dark");
			}
			if (newThemeType === "light") {
				// The string contains any of the substrings
				$('#siteSlogan').removeClass("slogan-gradient-dark");
				$('#siteSlogan').addClass("slogan-gradient");
			}

			var selected = "logo"; //$(this).attr("id");
			var theTheme = $(this).attr("rel");
			var theID = $(this).attr("id");
			if (selected === 'light') {
				localStorage.setItem("theme", selected);
				localStorage.setItem("activeLogo", selected);
				localStorage.setItem("activeTheme", "/assets/customcss/light.css?version=" + string);
				localStorage.setItem("themeType", newThemeType);
				//location.reload();
			} else {
				localStorage.setItem("theme", selected);
				localStorage.setItem("savedTheme", theID);
				localStorage.setItem("activeLogo", selected);
				localStorage.setItem("activeTheme", theTheme);
				localStorage.setItem("themeType", newThemeType);
			}
			return false;
		});
	});
});

// Scroll to top function
$(window).on('action:ajaxify.end', function(data) {
    var matched = false;
    $(document).ready(function() {
        var pageUp = $('#pageUp');
        var bar = $('.reading-meter');
        var perWidth = $('.reading-meter').width();
        
        // Main progressbar function
        function pageScroller() {
        var winScroll = document.body.scrollTop || document.documentElement.scrollTop;
        var height = document.documentElement.scrollHeight - document.documentElement.clientHeight;
        var scrolled = (winScroll / height) * 100;

        document.getElementById("progress-bar").style.width = parseFloat(scrolled).toFixed(0) + "%";
        $('#percentage').val(parseFloat(scrolled).toFixed(0) + "%");

        // Prevent the mouse scroll wheel from scrolling down after the pageUp button is clicked
        if ($('#pageUp').is(':focus')) {
        event.preventDefault();
        }
    }

        // Bind the pageScroller function to the window's scroll event
        $(window).scroll(function() {
            pageScroller();
        });

        // Check the URL and composer visibility separately from the scroll event
        $(window).scroll(function() {
            var thisURL = window.location.href;
            var checkURL = ["topic", "notifications", "user"];
            var isFound = false;
            for (var i = 0, len = checkURL.length; i < len; i++) {
                if (thisURL.indexOf(checkURL[i]) > -1) {
                    isFound = true;
                    break;
                }
            }
            if (isFound) {
                bar.removeClass('show');
                pageUp.removeClass('show');
            } else {
                // Exception here is that we don't want the scroll bar to show when the composer is active
                if ($(window).scrollTop() > 0 && (!$('[component="composer"]').is(":visible"))) {
                    bar.addClass('show');
                    pageUp.addClass('show');
                } else {
                    bar.removeClass('show');
                    pageUp.removeClass('show');
                }
            }
        });

        // Scroll to top when #pageUp is clicked
        $(document).on("click", "#pageUp", function(e) {
            const firstTopic = $('[component="category/topic"][data-index="0"]');
            if (firstTopic.length) {
                $("html").animate({
                    scrollTop: 0
                }, '300');
                return false;
            } else {
                ajaxify.refresh();
            }
            $('#progress-bar').width(0);
            pageUp.removeClass('show');
        });
    });
});



/*
Set pages where the progress bar should not be shown - see examples
in below array, and ensure you follow the same syntax for any you need to 
add
*/

$(window).on('action:ajaxify.end', function(data) {
    $(document).ready(function() {
        var bar = $('.reading-meter');
        var thisURL = window.location.href;
        var checkURL = new Array("user", "notifications");
        var isFound = false;
        for (var i = 0, len = checkURL.length; i < len; i++) {
            if (thisURL.indexOf(checkURL[i]) > -1) {
                isFound = true;
                break;
            }
        }
        if (isFound) {
            //console.log("Page '" + checkURL[i] + "' is in URL - hide progress bar");
            bar.removeClass('show');
        }
    });
});


// Footer Greeting
$(window).on('action:ajaxify.end', function(data) {
    var bar = $('.reading-meter');
    function updateUsername() {
        $('.getUsername .username').text(app.user.username);
        $('.topicUsername').text(app.user.username);
    }
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', updateUsername);
    } else {
        updateUsername();
    }
    var thehours = new Date().getHours();
    var themessage;
    var morning = ('Good morning');
    var afternoon = ('Good afternoon');
    var evening = ('Good evening');
    var matched = false;
    $('#getConsent').attr("href", "/user/" + app.user.username + "/consent");
    if (thehours >= 0 && thehours < 12) {
        themessage = morning;

    } else if (thehours >= 12 && thehours < 17) {
        themessage = afternoon;

    } else if (thehours >= 17 && thehours < 24) {
        themessage = evening;
    }
    if (window.location.href.indexOf("topic") > -1) {
        //console.log("This is a topic, so hide the user welcome message");
       bar.removeClass('show');
    } else {
        $('.getUsername').prepend(themessage);

    }


    //	$('.getUsername').prepend(themessage);
});

// Footer

$(document).ready(function() {
    $(window).on('action:ajaxify.end', function(data) {
        $("#console-nav-tab i").hide();
        var getState = localStorage.getItem("footer");
        if (getState == "hidden") {
            $("#console-nav-tab i").addClass("fa-solid fa-angles-left");
            $("#console-nav-footer").hide();
            $('.pagination-block').addClass("toBottom");
            $('.reading-meter').removeClass("toAbove");
        } else {
            $("#console-nav-tab i").addClass("fa-solid fa-angles-down");
            $('.pagination-block').removeClass("toBottom");
            $('.reading-meter').addClass("toAbove");
        }
        $("#console-nav-tab i").show();
        $("#console-nav-tab").click(function() {
            $("#console-nav-footer").slideToggle(250, function() {
                if ($("#console-nav-footer").is(":hidden")) {
                    localStorage.setItem("footer", "hidden");
                    $("#console-nav-tab i").addClass("fa-solid fa-angles-left");
                    $('.pagination-block').addClass("toBottom");
                    $('.reading-meter').removeClass("toAbove");
                } else {
                    localStorage.setItem("footer", "visible");
                    $("#console-nav-tab i").addClass("fa-solid fa-angles-down");
                    $('.pagination-block').removeClass("toBottom");
                    $('.reading-meter').addClass("toAbove");
                }
            });
            $("i", this).toggleClass("fa-angles-down fa-angles-left down");
        });
    });
});

/// Function to preview links
function previewLinks() {
    $(document).ready(function() {
        // Set this flag to true to enable debug logging
        var debug = false;
        // Get all the links within the content class (posts) and chat, excluding mentions plugin links
        var links = $(".content a:not(.plugin-mentions-a):not(.plugin-mentions-user):not(.fancybox), [component=\"chat/message/body\"] a:not(.plugin-mentions-a):not(.plugin-mentions-user), .preview-container a:not(.plugin-mentions-a):not(.plugin-mentions-user), .resolved-message a, .adhoc a");

        // List of domains to ignore
        var ignoredDomains = [window.location.protocol + "//" + window.location.hostname];

        // List of paths to ignore
        var ignoredPaths = ['/post'];
        if (debug) {
            // Log the ignored domains and paths
            console.log("OGProxy: Domains containing (or starting with) " + ignoredDomains[0] + " are in the ignore list and will not be parsed.");
            console.log("OGProxy: Paths containing " + ignoredPaths[0] + " are in the ignore list and will not be parsed.");
            console.log("OGProxy: Parsing DOM for any URLs that should be converted to previews.");
        }
        // Iterate over each link
        links.each(function() {
            var link = $(this);
            var url = link.attr("href");
            var hostname = link.prop("hostname");
            var text = $(this).text();

            // Helper function to check if the URL is a file URL
            function isFileUrl(url) {
                var fileExtensionPattern = /\.(png|jpeg|gif|pdf|docx?|xlsx?|pptx?|zip|rar|svg)$/i;
                return fileExtensionPattern.test(url);
            }

            function isFullPath(url) {
                // Regular expression to match a full path URL
                var fullPathRegex = /^(?:[a-z]+:)?\/\//i;

                // Check if the URL matches the full path pattern
                return fullPathRegex.test(url);
            }

            // Helper function to check if the domain should be ignored
            function shouldIgnoreDomain(url, ignoredDomains) {
                var domain = extractDomain(url);
                if (domain && ignoredDomains && ignoredDomains.length > 0 && ignoredPaths.some(path => url.includes(path))) {
                    return true;
                }
                return domain && ignoredDomains && ignoredDomains.includes(domain);
            }

            // Helper function to extract the domain from the URL
            function extractDomain(url) {
                if (url) {
                    var domain = url.split('/')[2]?.split(':')[0];
                    return domain;
                }
                return null;
            }

            // Process the link if it's not a file URL, not in the ignored domain list, and it's the only content within its parent element
            if (!isFileUrl(url) && !shouldIgnoreDomain(url, ignoredDomains) && link.parent().contents().length === 1) {
                var host = window.location.protocol + "//" + hostname;
                var faviconApi = "https://t0.gstatic.com/faviconV2?client=SOCIAL&type=FAVICON&fallback_opts=TYPE,SIZE,URL&url=" + host + "&size=32";
                if (debug) {
                    console.log("OGProxy: Getting favicon for URL: " + url);
                }
                var website = link.prop("hostname");
                var altSite = website.replace(/^www\./, "").replace(/\..+$/, "");
                var proxy = "https://proxy.sudonix.org";
                var apiKey = "3d9144c0858edd33e109dd4334ef1282d04342792749975c68960159c39c6973";

                // Send an AJAX request to the proxy server to fetch OpenGraph data for the URL
                $.ajax({
                    url: proxy + "/ogproxy?url=" + encodeURIComponent(url),
                    method: "GET",
                    headers: {
                        'X-Api-Key': apiKey
                    },
                    success: function(data) {
                        var result = data.result;
                        // Extract relevant data from the OpenGraph result or use fallback values
                        var rawTitle = $(data.html).filter('title').text();
                        var altTitle = $(result).filter('meta[property="og:title"]').attr('content');
                        var altDescription = $(result).filter('meta[property="og:description"]').attr('content');
                        var tempDescription = "This website did not return any description. It might be behind a login or paywall.";
                        var altImageUrl = $(result).filter('meta[property="og:image"]').attr('content');
                        var ogImage = $(result).filter('meta[property="og:image"]').attr('content');
                        var tempImage = proxy + "/images/404_3.webp";
                        var url = result.requestUrl || url;
                        var title = rawTitle || result.ogTitle || altTitle;
                        var description = result.ogDescription || altDescription || tempDescription;
                        var favicon = faviconApi || result.favicon || data.faviconUrl;
                        if (debug) {
                            console.log("OGProxy: Getting data from URL: " + url);
                            console.log(result);
                        }
                        //var imageUrl = result.ogImage && result.ogImage[0].url || altImageUrl;
                        if (result.ogImage && Array.isArray(result.ogImage) && result.ogImage.length > 0) {
                            if (debug) {
                                console.log("OGProxy: Found OpenGraph image: " + result.ogImage[0].url);
                            }
                            var imageUrl = result.ogImage[0].url;
                        } else if (altImageUrl) {
                            if (debug) {
                                console.log("OGProxy: OpenGraph image alternative is " + altImageUrl);
                            }
                            var imageUrl = altImageUrl;
                        } else {
                            if (debug) {
                                console.log("OGProxy: No image found in OpenGraph data. Substitute with " + tempImage);
                            }
                            var imageUrl = tempImage;
                        }

                        // Some websites return a relative path for the image URL, which isn't much use, so we need to change this to full
                        var fullImagePath = host + imageUrl;
                        var site = result.ogSiteName || altSite;
                        if (isFullPath(imageUrl) === false) {
                            imageUrl = fullImagePath;
                        }
                        // Test to see if image is broken in the preview card. This might be the result of hotlinking protection, so the image isn't
                        // rendered as a result. If this is the case, we replace it with the tempImage to keep things looking nice.
                        $(document).ready(function() {
                            if (!imageUrl) {
                                //$('#card-image img').on('error', function() {
                                // Image failed to load
                                // Add logic here to handle the broken image
                                if (debug) {
                                    console.log("OGProxy: Broken image URL: " + imageUrl + " detected. Replacing with " + tempImage);
                                }
                                $(this).attr('src', tempImage); // Replace with a placeholder image
                            };
                        });
                        // Create the HTML for the link preview card
                        var cardHtml = '<div class="card card-wrapper">' +
                            '<a href="' + url + '">' +
                            '<div class="card card-preview">' +
                            '<div class="card-image-container">' +
                            '<div id="card-image"><img src="' + imageUrl + '"></div>' +
                            '</div>' +
                            '<div class="card-body">' +
                            '<h4 id="sitetitle" class="card-site-title"><img id="favicon" class="card-favicon" src="' + favicon + '">' + site + '</h4>' +
                            '<h6 class="card-title">' + title + '</h6>' +
                            '<p class="card-text">' + truncateDescription(description, 150) + '</p>' +
                            '</div>' +
                            '</div>' +
                            '</div>' +
                            '</a>';
                        // Replace the original link with the link preview card
                        link.replaceWith(cardHtml);
                    },
                    error: function() {
                        if (debug) {
                            console.log("OGProxy: Error fetching OpenGraph data for URL: " + url);
                        }
                    }
                });
            }
        });
    });
}

// Helper function to truncate the description with ellipsis if it exceeds the specified limit
function truncateDescription(description, limit) {
    if (description.length > limit) {
        return description.substring(0, limit) + '...(more) ';
    }
    return description;
}

$(window).on('action:ajaxify.end', function(data) {
    $(document).ready(function() {
      //  previewLinks()
    });
});

$(window).on('action:posts.loaded', function(data) {
    $(document).ready(function() {
      //  previewLinks()
    });
});

$(window).on('action:posts.edited', function(data) {
    $(document).ready(function() {
       // previewLinks()
    });
});

$(window).on('action:chat.loaded', function(data) {
    $(document).ready(function() {
      //  previewLinks()
    });
});

$(window).on('action:chat.received', function(data) {
    $(document).ready(function() {
       // previewLinks()
    });
});
$(window).on('action:composer.preview', function(data) {
    $(document).ready(function() {
    //    previewLinks()
    });
});

// Chat message banner
function chatBanner() {
    var roomName = $("h5[component='chat/header/title']").text().trim();
    var bannerContent;
    if (roomName === "Testing 3") {
        bannerContent = '<div id="chatbanner">This message will fire for chat rooms with the title of "Testing 3"</div>';
    } else {
        bannerContent = '<div id="chatbanner">This session is for <strong>private discussion only</strong> between the chosen participants. Please do <strong>not</strong> place support requests here and create a <a href="#" onclick="app.newTopic();">new topic</a> instead.</div>';
    }
    var chatMessagesContainer = $('[component="chat/system-message"]:last-of-type');
    var existingMessages = $('[component="chat/message"]');

    if (existingMessages.length === 0) {
        // If there are no messages, append the banner to the messages container
        chatMessagesContainer.first().after(bannerContent);
    } else {
        // If there are messages, add the banner after the last message
        existingMessages.last().after(bannerContent);
    }
}

$(window).on('action:chat.loaded', function(data) {
    $(document).ready(function() {
        chatBanner()
    });
});


function syntaxHighlight() {
      $(document).ready(function() {
    // Automatically detect and highlight code blocks on page load
    $('code').each(function() {
      // Get the language class from the code block (if available)
      var language = $(this).attr('class');
      // Remove existing language class to avoid conflicts
      $(this).removeClass(language);
      // Highlight the code block using Highlight.js
      hljs.highlightElement(this);
      // Add the language class back to the code block
      $(this).addClass(language);
    });
  });
}

$(window).on('action:ajaxify.end', function(data) {
    $(document).ready(function() {
        syntaxHighlight();
	});
});
 
$(window).on('action:posts.loaded', function(data) {
	$(document).ready(function() { 
        syntaxHighlight();
	});
});
$(window).on('action:posts.edited', function(data) {
	$(document).ready(function() {
        syntaxHighlight();
	});
});
$(window).on('action:composer.preview', function(data) {
    $(document).ready(function() {
        syntaxHighlight();
    });
});
$(window).on('action:chat.loaded', function(data) {
	$(document).ready(function() {
        syntaxHighlight();
	});
});
$(window).on('action:chat.received', function(data) {
	$(document).ready(function() {
        syntaxHighlight();
	});
});

function threaded() {
    $(document).ready(function () {
        // Check if the screen width is 1200px or more
        if ($(window).width() >= 1200) {
            // Check if the dropdown already exists
            if ($('#enableThreading').length === 0) {
                var threadView = $('<div class="threads-wrapper"><i class="fa fa-fw fa-bars left"></i><form class="form"><div class="form-check form-switch sticky-tools-bar"> \
                    <input class="form-check-input" id="enableThreading" type="checkbox" data-field="enableThreading"> \
                    <label class=" d-none d-md-inline fw-semibold" for="enableThreading"><i class="fa fa-fw fa-bars-staggered right"></i></label> \
                </div></form></div>');
                $('.topic .sticky-tools ul .hidden-xs').append(threadView);
                // Check if there's a stored state for the checkbox and update it
                var storedState = localStorage.getItem('enableThreadingState');
                if (storedState === 'true') {
                    $('#enableThreading').prop('checked', true);
                }
            }
            // Toggle the class 'threaded' on or off when the checkbox changes state
            $('#enableThreading').on('change', function () {
                var isChecked = $(this).is(':checked');
                if (isChecked) {
                    console.log('Thread view is active.');
                    $('ul[component="topic"]').addClass('threaded');
                    $('.posts-container').addClass('threaded')
                    $('ul[component="topic"]').addClass('threaded')
                    $('.post-container').addClass('threaded')
                    $('.timeline-event').addClass('threaded')
                    $('[component="post/footer"]').addClass('threaded');
                    $('[component="post"]').each(function () {
                        // Add the 'threaded' class to matching elements
                        if ($(this).hasClass('pt-4') || $(this).hasClass('self-post')) {
                            $(this).addClass('threaded');
                            $('.topic .sticky-tools').addClass('threaded');
                        }
                    });
                } else {
                    console.log('Thread view is inactive.');
                    $('[component="post"]').removeClass('threaded');
                    $('ul[component="topic"]').removeClass('threaded');
                    $('.posts-container').removeClass('threaded')
                    $('ul[component="topic"]').removeClass('threaded')
                    $('.post-container').removeClass('threaded')
                    $('.timeline-event').removeClass('threaded')
                    $('[component="post/footer"]').removeClass('threaded');
                    $('.topic .sticky-tools').removeClass('threaded');
                }
                // Store the checkbox state in localStorage
                localStorage.setItem('enableThreadingState', isChecked);
            });
            // Check for changes in the checkbox state when the page loads
            $('#enableThreading').trigger('change');
        }
    });
}

function threadedChat() {
    $(document).ready(function () {
        // Check if the screen width is 1200px or more
        if ($(window).width() >= 1200) {
            // Check if the dropdown already exists
            if ($('#enableThreadingChat').length === 0) {
                var chatView = $('<div class="threads-wrapper"><i class="fa fa-fw fa-bars left"></i><form class="form"><div class="form-check form-switch sticky-tools-bar"> \
                    <input class="form-check-input" id="enableThreadingChat" type="checkbox" data-field="enableThreading"> \
                    <label class=" d-none d-md-inline fw-semibold" for="enableThreadingChat"><i class="fa fa-fw fa-bars-staggered right"></i></label> \
                </div></form></div>');
                $('[component="chat/header"]').prepend(chatView);

                // Check if there's a stored state for the checkbox and update it
                var storedState = localStorage.getItem('enableThreadingStateChat');
                if (storedState === 'true') {
                    $('#enableThreadingChat').prop('checked', true);
                }
            }

            // Toggle the class 'threaded' on or off when the checkbox changes state
            $('#enableThreadingChat').on('change', function () {
                var isChecked = $(this).is(':checked');
                if (isChecked) {
                    console.log('Thread view is active.');
                    $('[component="chat/message"]').each(function () {
                        // Add the 'threaded' class to matching elements
                        if ($(this).hasClass('chat-message')) {
                            $(this).addClass('threaded');
                        }
                    });
                } else {
                    console.log('Thread view is inactive.');
                    $('[component="chat/message"]').removeClass('threaded');
                }

                // Store the checkbox state in localStorage
                localStorage.setItem('enableThreadingStateChat', isChecked);
            });

            // Check for changes in the checkbox state when the page loads
            $('#enableThreadingChat').trigger('change');
        }
    });
}


$(window).on('action:chat.loaded', function(data) {
        threadedChat();
});
$(window).on('action:chat.received', function(data) {
        threadedChat();
});
$(window).on('action:ajaxify.end', function (data) {
    threaded();
});

$(window).on('action:posts.edited', function (data) {
    threaded();
});

$(window).on('action:posts.loaded', function (data) {
    threaded();
});
